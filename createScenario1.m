function [allData, scenario, sensors] = createScenario1()
rng(2018);
%createScenario1 - Returns sensor detections
%    allData = createScenario1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = createScenario1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.13 (R2022b) and Automated Driving Toolbox 3.6 (R2022b).
% Generated on: 27-Feb-2023 14:42:08

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
        numObjects = length(objectDets);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'DetectionProbability', 0.01, ...
    'TargetReportFormat', 'Detections', ...
    'HasOcclusion', false, ...
    'Profiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [60 0 0], ...
    'RangeLimits', [0 20], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-60 0 0], ...
    'RangeLimits', [0 20], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [0 0.9 0.2], ...
    'MountingAngles', [130 0 0], ...
    'RangeLimits', [0 20], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-130 0 0], ...
    'RangeLimits', [0 20], ...
    'TargetReportFormat', 'Detections', ...
    'HasElevation', true, ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
numSensors = 5;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('StopTime', 20);

% Add all road segments
roadCenters = [0 0 0;
    299.43 0 0;
    486.7 0 0;
    797 -1 0];
laneSpecification = lanespec(3);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [36 0 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [36 0 0;
    170 0 0;
    285 0 0;
    404.1 0 0];
speed = [15;15;15;15];
waittime = [0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
frontCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [58 0.104416064790012 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'FrontCar');
waypoints = [58 0.104416064790012 0;
    190 0 0;
    298 0.1 0;
    427.02 0.24 0.01];
speed = [15;15;15;15];
waittime = [0;0;0;0];
trajectory(frontCar, waypoints, speed, waittime);

passingCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [8.7018 4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'PassingCar');
waypoints = [8.7018 4 0;
    190 4 0;
    293 4 0;
    441.3 4 0];
speed = [17;17;17;17];
waittime = [0;0;0;0];
trajectory(passingCar, waypoints, speed, waittime);

backCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [32 -4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'BackCar');
waypoints = [32 -4 0;
    40 -4 0;
    113 -4 0;
    116.7 -4 0;
    121.3 -4 0;
    124.34 -4 0;
    127.52 -4 0;
    129.87 -4 0;
    132.79 -4 0;
    136.4 -4 0;
    140.2 -4 0];
speed = [15;15;14;14;13;12;10;10;10;5;5];
waittime = [0;0;0;0;0;0;0;0;0;0;0];
trajectory(backCar, waypoints, speed, waittime);

